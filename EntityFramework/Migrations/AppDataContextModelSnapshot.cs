// <auto-generated />
using EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EntityFramework.Migrations
{
    [DbContext(typeof(AppDataContext))]
    partial class AppDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataModels.Difficulty", b =>
                {
                    b.Property<int>("DifficultyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("DifficultyId");

                    b.ToTable("Difficulty");
                });

            modelBuilder.Entity("DataModels.Exercise", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<Guid>("TrainingId");

                    b.HasKey("ExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("DataModels.ExerciseCoreMuscleGroup", b =>
                {
                    b.Property<Guid>("ExcersiceId");

                    b.Property<Guid>("MuscleGroupId");

                    b.HasKey("ExcersiceId", "MuscleGroupId");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("ExerciseCoreMuscleGroup");
                });

            modelBuilder.Entity("DataModels.ExerciseSuppMuscleGroup", b =>
                {
                    b.Property<Guid>("ExcersiceId");

                    b.Property<Guid>("MuscleGroupId");

                    b.HasKey("ExcersiceId", "MuscleGroupId");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("ExerciseSuppMuscleGroup");
                });

            modelBuilder.Entity("DataModels.MuscleCategory", b =>
                {
                    b.Property<Guid>("MuscleCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("MuscleCategoryId");

                    b.ToTable("MuscleCategory");
                });

            modelBuilder.Entity("DataModels.MuscleGroup", b =>
                {
                    b.Property<Guid>("MuscleGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MuscleCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("MuscleGroupId");

                    b.HasIndex("MuscleCategoryId");

                    b.ToTable("MuscleGroup");
                });

            modelBuilder.Entity("DataModels.Set", b =>
                {
                    b.Property<Guid>("SetId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DifficultyId");

                    b.Property<Guid?>("ExerciseId");

                    b.Property<Guid>("ExericeId");

                    b.HasKey("SetId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("DataModels.Training", b =>
                {
                    b.Property<Guid>("TrainingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("TrainingId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("DataModels.TrainingMuscleCategories", b =>
                {
                    b.Property<Guid>("MuscleCategoryId");

                    b.Property<Guid>("TrainingId");

                    b.HasKey("MuscleCategoryId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingMuscleCategories");
                });

            modelBuilder.Entity("DataModels.Exercise", b =>
                {
                    b.HasOne("DataModels.Training", "Training")
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModels.ExerciseCoreMuscleGroup", b =>
                {
                    b.HasOne("DataModels.Exercise", "Exercise")
                        .WithMany("CoreMuscleGroups")
                        .HasForeignKey("ExcersiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModels.MuscleGroup", "MuscleGroup")
                        .WithMany("CoreExcercises")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModels.ExerciseSuppMuscleGroup", b =>
                {
                    b.HasOne("DataModels.Exercise", "Exercise")
                        .WithMany("SupplimentaryMuscleGroups")
                        .HasForeignKey("ExcersiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModels.MuscleGroup", "MuscleGroup")
                        .WithMany("SupExcercises")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModels.MuscleGroup", b =>
                {
                    b.HasOne("DataModels.MuscleCategory", "MuscleCategory")
                        .WithMany("MuscleGroups")
                        .HasForeignKey("MuscleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModels.Set", b =>
                {
                    b.HasOne("DataModels.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("DataModels.Exercise", "Exercise")
                        .WithMany("Sets")
                        .HasForeignKey("ExerciseId");

                    b.OwnsOne("DataModels.ComplexModels.Metrics", "Metrics", b1 =>
                        {
                            b1.Property<Guid>("SetId");

                            b1.Property<double>("Distance");

                            b1.Property<double>("Duration");

                            b1.Property<int>("Repetitions");

                            b1.Property<double>("Weight");

                            b1.ToTable("Sets");

                            b1.HasOne("DataModels.Set")
                                .WithOne("Metrics")
                                .HasForeignKey("DataModels.ComplexModels.Metrics", "SetId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DataModels.TrainingMuscleCategories", b =>
                {
                    b.HasOne("DataModels.MuscleCategory", "MuscleCategory")
                        .WithMany("Trainings")
                        .HasForeignKey("MuscleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModels.Training", "Training")
                        .WithMany("MuscleCategories")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
